package proxy.common.converter;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.io.JsonEncoder;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.NullNode;

import proxy.common.exception.ProxyException;
import proxy.common.exception.resource.Errors;
import lombok.extern.slf4j.Slf4j;

/**
 * Conversion of AVRO -> JSON
 */
@Component
@Slf4j
public class AvroConverter implements SchemaConverter {
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final EncoderFactory encoderFactory = EncoderFactory.get();

    @Override
    public JsonNodeAndSize toJson(Object value) {
        try {
            byte[] bytes = convert(value);
            // 바이트 값이 없는 경우, 빈 객체 반환
            if (bytes == null) {
                return new JsonNodeAndSize(NullNode.getInstance(), 0);
            }
            // JsonNode로 표현된 데이터 & 바이트 사이즈 맵핑
            return new JsonNodeAndSize(objectMapper.readTree(bytes), bytes.length);

        } catch (IOException e) {
            log.error("Jackson failed to deserialize JSON generated by Avro's JSON encoder: ", e);
            throw new ProxyException(Errors.AVRO_TO_JSON_FAILED, e.getMessage());
        } catch (RuntimeException e) {
            log.error("Unexpected exception convertion Avro to JSON: ", e);
            throw new ProxyException(Errors.AVRO_TO_JSON_FAILED, e.getMessage());
        }
    }

    /**
     * convert Object -> byte[]
     * @param value
     * @return
     * @throws IOException
     */
    private byte[] convert(Object value) throws IOException {
        if (value == null) return null;
        
        try (ByteArrayOutputStream output = new ByteArrayOutputStream()) {
            // get avro schema from value
            GenericData.Record record = (GenericData.Record) value;
            Schema avroSchema = record.getSchema();

            // writer 생성
            DatumWriter<Object> writer = (DatumWriter<Object>) new GenericDatumWriter<>(avroSchema);

            // data -> byte[]
            JsonEncoder encoder = encoderFactory.jsonEncoder(avroSchema, output);
            Object wrappedValue = value;
            if (value instanceof byte[]) {
                wrappedValue = ByteBuffer.wrap((byte[]) value); // Some types require wrapping/conversion
            }
            writer.write(wrappedValue, encoder);

            encoder.flush();

            return output.toByteArray();
        }
    }
}
